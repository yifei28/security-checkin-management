name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  # CI阶段：测试和构建
  test:
    runs-on: ubuntu-latest
    name: 🧪 Test & Build
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm ci

    - name: Lint code
      run: npm run lint

    - name: TypeScript compilation and build
      run: npm run build

    - name: Build Docker image
      run: |
        docker build -t checkin-frontend:latest .
        echo "✅ Docker image built successfully"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/

  # CD阶段：部署到生产环境
  deploy:
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Production
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        command_timeout: 20m
        script: |
          # 设置项目目录路径
          PROJECT_DIR="$HOME/security-checkin-management"

          # 检查项目目录是否存在，如果不存在则克隆
          if [ ! -d "$PROJECT_DIR" ]; then
            echo "🔄 Repository not found, cloning..."
            git clone https://github.com/yifei28/security-checkin-management.git "$PROJECT_DIR"
          fi

          # 切换到项目目录
          cd "$PROJECT_DIR"

          # 配置Git安全目录（避免权限问题）
          git config --global --add safe.directory "$PROJECT_DIR"

          # 检查deploy.sh是否存在
          if [ ! -f "./deploy.sh" ]; then
            echo "❌ deploy.sh not found in repository"
            echo "📁 Current directory contents:"
            ls -la
            exit 1
          fi

          # 使用部署脚本进行部署（deploy.sh 会处理代码更新）
          chmod +x deploy.sh
          ./deploy.sh --update --clean

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "🎉 Frontend deployment to production succeeded!"
        else
          echo "💥 Frontend deployment failed!"
        fi

  # 通知阶段
  notify:
    runs-on: ubuntu-latest
    name: 📢 Notify
    needs: [test, deploy]
    if: always()

    steps:
    - name: Notification
      run: |
        echo "Frontend Pipeline completed:"
        echo "Test status: ${{ needs.test.result }}"
        echo "Deploy status: ${{ needs.deploy.result }}"